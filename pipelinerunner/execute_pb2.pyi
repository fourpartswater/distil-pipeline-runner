# @generated by generate_proto_mypy_stubs.py.  Do not edit!
from abc import (
    ABCMeta as abc___ABCMeta,
    abstractmethod as abc___abstractmethod,
)

from concurrent.futures import (
    Future as concurrent___futures___Future,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Any as typing___Any,
    Callable as typing___Callable,
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)


class PipelineExecuteRequest(google___protobuf___message___Message):

    @property
    def pipelineDescription(self) -> PipelineDescription: ...

    @property
    def inputs(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Value]: ...

    def __init__(self,
        pipelineDescription : typing___Optional[PipelineDescription] = None,
        inputs : typing___Optional[typing___Iterable[Value]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PipelineExecuteRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...

class PipelineExecuteResponse(google___protobuf___message___Message):
    resultURI = ... # type: typing___Text

    def __init__(self,
        resultURI : typing___Optional[typing___Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> PipelineExecuteResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...

class Executor(typing___Any, metaclass=abc___ABCMeta):
    @abc___abstractmethod
    def ExecutePipeline(self,
        rpc_controller: typing___Any,
        request: PipelineExecuteRequest,
        done: typing___Optional[typing___Callable[[PipelineExecuteResponse], None]],
    ) -> concurrent___futures___Future[PipelineExecuteResponse]: ...
class Executor_Stub(Executor):
    def __init__(self, rpc_channel: typing___Any) -> None: ...
    def ExecutePipeline(self,
        rpc_controller: typing___Any,
        request: PipelineExecuteRequest,
        done: typing___Optional[typing___Callable[[PipelineExecuteResponse], None]],
    ) -> concurrent___futures___Future[PipelineExecuteResponse]: ...